#include <vector>

vector<type> vectorname;

For a vector, you can set up a loop like this:
	for(vector<type>::iterator iter = vectorname.begin(); iter != vectorname.end(); iter++)

Since the iterator is a pointer to an element of a vector or map (or really any STL container), to work with the element, you have to dereference it. The way we’ve learned is through the * operator. Other examples:
	If it’s a vector<int>, you can do  *iter = 5;
	If it’s a vector<double>, you can do *iter = 4.85;
	If it’s a vector<string>, you can do *iter = “Vectors rock!”;
If the vector is of a class, remember that
	(*iter).function()        is the same as         iter->function()
and you can use either one to access the class information.

ref. Assignment 9



Strings also are containers of characters. They can be used exactly like the types below, and they also include built-in iterators.

vector<type>::iterator		map<type,type>::iterator		list<type>::iterator

Below is an example:

// Fills a list with characters from a string
void fillList(list<char> &thelist, string toadd)
{
	//string iterating loop
	for(string::iterator it = toadd.begin(); it != toadd.end(); it++)
	{
		thelist.push_back(*it);
	}

}